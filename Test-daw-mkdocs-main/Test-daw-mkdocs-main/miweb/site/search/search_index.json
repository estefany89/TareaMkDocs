{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TAREA HTML CSS XML GIT MARKDOWN","title":"Home"},{"location":"#tarea","text":"HTML CSS XML GIT MARKDOWN","title":"TAREA"},{"location":"CSS/","text":"Cap\u00edtulo 1. Introducci\u00f3n \u00bfQu\u00e9 es CSS? CSS es un lenguaje de hojas de estilos creado para controlar el aspecto o presentaci\u00f3n de los documentos electr\u00f3nicos definidos con HTML y XHTML. CSS es la mejor forma de separar los contenidos y su presentaci\u00f3n y es imprescindible para crear p\u00e1ginas web complejas. Separar la definici\u00f3n de los contenidos y la definici\u00f3n de su aspecto presenta numerosas ventajas, ya que obliga a crear documentos HTML/XHTML bien definidos y con significado completo (tambi\u00e9n llamados \"documentos sem\u00e1nticos\" ). Adem\u00e1s, mejora la accesibilidad del documento, reduce la complejidad de su mantenimiento y permite visualizar el mismo documento en infinidad de dispositivos diferentes. Al crear una p\u00e1gina web, se utiliza en primer lugar el lenguaje HTML/XHTML para marcar los contenidos, es decir, para designar la funci\u00f3n de cada elemento dentro de la p\u00e1gina: p\u00e1rrafo, titular, texto destacado, tabla, lista de elementos, etc. Una vez creados los contenidos, se utiliza el lenguaje CSS para definir el aspecto de cada elemento: color, tama\u00f1o y tipo de letra del texto, separaci\u00f3n horizontal y vertical entre elementos, posici\u00f3n de cada elemento dentro de la p\u00e1gina, etc. Funcionamiento b\u00e1sico de CSS Antes de que se generalizara el uso de CSS, los dise\u00f1adores de p\u00e1ginas web utilizaban etiquetas HTML especiales para modificar el aspecto de los elementos de la p\u00e1gina. El siguiente ejemplo muestra una p\u00e1gina HTML con estilos definidos sin utilizar CSS: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>Ejemplo de estilos sin CSS</title> </head> <body> <h1><font color=\"red\" face=\"Arial\" size=\"5\">Titular de la p\u00e1gina</font></h1> <p><font color=\"gray\" face=\"Verdana\" size=\"2\">Un p\u00e1rrafo de texto no muy largo.</font></p> </body> </html> !DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>Ejemplo de estilos con CSS</title> <style type=\"text/css\"> h1 { color: red; font-family: Arial; font-size: large; } p { color: gray; font-family: Verdana; font-size: medium; } </style> </head> <body> <h1>Titular de la p\u00e1gina</h1> <p>Un p\u00e1rrafo de texto no muy largo.</p> </body> </html> CSS permite separar los contenidos de la p\u00e1gina y la informaci\u00f3n sobre su aspecto. En el ejemplo anterior, dentro de la propia p\u00e1gina HTML se crea una zona especial en la que se incluye toda la informaci\u00f3n relacionada con los estilos de la p\u00e1gina. Incluir CSS en el mismo documento HTML Los estilos se definen en una zona espec\u00edfica del propio documento HTML. Se emplea la etiqueta <style> de HTML y solamente se pueden incluir en la cabecera del documento (s\u00f3lo dentro de la secci\u00f3n <head> ). Ejemplo: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>Ejemplo de estilos CSS en el propio documento</title> <style type=\"text/css\"> p { color: black; font-family: Verdana; } </style> </head> <body> <p>Un p\u00e1rrafo de texto.</p> </body> </html> Este m\u00e9todo se emplea cuando se define un n\u00famero peque\u00f1o de estilos o cuando se quieren incluir estilos espec\u00edficos en una determinada p\u00e1gina HTML que completen los estilos que se incluyen por defecto en todas las p\u00e1ginas del sitio web. Glosario b\u00e1sico CSS define una serie de t\u00e9rminos que permiten describir cada una de las partes que componen los estilos CSS. El siguiente esquema muestra las partes que forman un estilo CSS muy b\u00e1sico: Figura 1.1 Componentes de un estilo CSS b\u00e1sico Los diferentes t\u00e9rminos se definen a continuaci\u00f3n: Regla: cada uno de los estilos que componen una hoja de estilos CSS. Cada regla est\u00e1 compuesta de una parte de \"selectores\" , un s\u00edmbolo de \"llave de apertura\" ( { ), otra parte denominada \"declaraci\u00f3n\" y por \u00faltimo, un s\u00edmbolo de \"llave de cierre\" ( } ). Selector: indica el elemento o elementos HTML a los que se aplica la regla CSS. Declaraci\u00f3n: especifica los estilos que se aplican a los elementos. Est\u00e1 compuesta por una o m\u00e1s propiedades CSS. Propiedad: caracter\u00edstica que se modifica en el elemento seleccionado, como por ejemplo su tama\u00f1o de letra, su color de fondo, etc. Valor: establece el nuevo valor de la caracter\u00edstica modificada en el elemento. Un archivo CSS puede contener un n\u00famero ilimitado de reglas CSS, cada regla se puede aplicar a varios selectores diferentes y cada declaraci\u00f3n puede incluir tantos pares propiedad/valor como se desee. El est\u00e1ndar CSS 2.1 define 115 propiedades, cada una con su propia lista de valores permitidos. Por su parte, los \u00faltimos borradores del est\u00e1ndar CSS 3 ya incluyen 239 propiedades. Cap\u00edtulo 2. Selectores Para crear dise\u00f1os web profesionales, es imprescindible conocer y dominar los selectores de CSS. Como se vio en el cap\u00edtulo anterior, una regla de CSS est\u00e1 formada por una parte llamada \"selector\" y otra parte llamada \"declaraci\u00f3n\". La declaraci\u00f3n indica \"qu\u00e9 hay que hacer\" y el selector indica \"a qui\u00e9n hay que hac\u00e9rselo\" . Por lo tanto, los selectores son imprescindibles para aplicar de forma correcta los estilos CSS en una p\u00e1gina. A un mismo elemento HTML se le pueden aplicar varias reglas CSS y cada regla CSS puede aplicarse a un n\u00famero ilimitado de elementos. En otras palabras, una misma regla puede aplicarse sobre varios selectores y un mismo selector se puede utilizar en varias reglas. El est\u00e1ndar de CSS 2.1 incluye una docena de tipos diferentes de selectores, que permiten seleccionar de forma muy precisa elementos individuales o conjuntos de elementos dentro de una p\u00e1gina web. No obstante, la mayor\u00eda de p\u00e1ginas de los sitios web se pueden dise\u00f1ar utilizando solamente los cinco selectores b\u00e1sicos. Cap\u00edtulo 3. Modelo de cajas El modelo de cajas o \"box model\" es seguramente la caracter\u00edstica m\u00e1s importante del lenguaje de hojas de estilos CSS, ya que condiciona el dise\u00f1o de todas las p\u00e1ginas web. El modelo de cajas es el comportamiento de CSS que hace que todos los elementos de las p\u00e1ginas se representen mediante cajas rectangulares. Las cajas de una p\u00e1gina se crean autom\u00e1ticamente. Cada vez que se inserta una etiqueta HTML, se crea una nueva caja rectangular que encierra los contenidos de ese elemento. La siguiente imagen muestra las tres cajas rectangulares que crean las tres etiquetas HTML que incluye la p\u00e1gina: Figura 4.1 Las cajas se crean autom\u00e1ticamente al definir cada elemento HTML Las cajas de las p\u00e1ginas no son visibles a simple vista porque inicialmente no muestran ning\u00fan color de fondo ni ning\u00fan borde. La siguiente imagen muestra las cajas que forman la p\u00e1gina web de http://www.alistapart.com/ despu\u00e9s de forzar a que todas las cajas muestren su borde: Figura 4.2 Cajas que forman la p\u00e1gina alistapart.com Cap\u00edtulo 4. Posicionamiento y visualizaci\u00f3n Cuando los navegadores descargan el contenido HTML y CSS de las p\u00e1ginas web, aplican un procesamiento muy complejo antes de mostrar las p\u00e1ginas en la pantalla del usuario. Para cumplir con el modelo de cajas presentado en el cap\u00edtulo anterior, los navegadores crean una caja para representar a cada elemento de la p\u00e1gina HTML. Los factores que se tienen en cuenta para generar cada caja son: Las propiedades width y height de la caja (si est\u00e1n establecidas). El tipo de cada elemento HTML (elemento de bloque o elemento en l\u00ednea). Posicionamiento de la caja (normal, relativo, absoluto, fijo o flotante). Las relaciones entre elementos (d\u00f3nde se encuentra cada elemento, elementos descendientes, etc.) Otro tipo de informaci\u00f3n, como por ejemplo el tama\u00f1o de las im\u00e1genes y el tama\u00f1o de la ventana del navegador. En este cap\u00edtulo se muestran los cinco tipos de posicionamientos definidos para las cajas y se presentan otras propiedades que afectan a la forma en la que se visualizan las cajas. Cap\u00edtulo 5. Im\u00e1genes Establecer la anchura y altura de las im\u00e1genes Utilizando las propiedades width y height , es posible mostrar las im\u00e1genes con cualquier altura/anchura, independientemente de su altura/anchura real: #destacada { width: 120px; height: 250px; } <img id=\"destacada\" src=\"imagen.png\" /> No obstante, si se utilizan alturas/anchuras diferentes de las reales, el navegador deforma las im\u00e1genes y el resultado est\u00e9tico es muy desagradable. Cap\u00edtulo 6. Tablas Estilos b\u00e1sicos Cuando se aplican bordes a las celdas de una tabla, el aspecto por defecto con el que se muestra en un navegador es el siguiente: Figura 10.1 Aspecto por defecto de los bordes de una tabla El c\u00f3digo HTML y CSS del ejemplo anterior se muestra a continuaci\u00f3n: .normal { width: 250px; border: 1px solid #000; } .normal th, .normal td { border: 1px solid #000; } <table class=\"normal\" summary=\"Tabla gen\u00e9rica\"> <tr> <th scope=\"col\">A</th> <th scope=\"col\">B</th> <th scope=\"col\">C</th> <th scope=\"col\">D</th> <th scope=\"col\">E</th> </tr> ... </table> Cap\u00edtulo 7. Layout El dise\u00f1o de las p\u00e1ginas web habituales se divide en bloques: cabecera, men\u00fa, contenidos y pie de p\u00e1gina. Visualmente, los bloques se disponen en varias filas y columnas. Por este motivo, hace varios a\u00f1os la estructura de las p\u00e1ginas HTML se defin\u00eda mediante tablas. El desarrollo de CSS ha permitido que se puedan realizar los mismos dise\u00f1os sin utilizar tablas HTML. Las principales ventajas de dise\u00f1ar la estructura de las p\u00e1ginas web con CSS en vez de con tablas HTML son las siguientes: Mantenimiento : una p\u00e1gina dise\u00f1ada exclusivamente con CSS es mucho m\u00e1s f\u00e1cil de mantener que una p\u00e1gina dise\u00f1ada con tablas. Cambiar el aspecto de una p\u00e1gina creada con CSS es tan f\u00e1cil como modificar unas pocas reglas en las hojas de estilos. Sin embargo, realizar la misma modificaci\u00f3n en una p\u00e1gina creada con tablas supone un esfuerzo muy superior y es m\u00e1s probable cometer errores. Accesibilidad : las p\u00e1ginas creadas con CSS son m\u00e1s accesibles que las p\u00e1ginas dise\u00f1adas con tablas. De hecho, los navegadores que utilizan las personas discapacitadas (en especial las personas invidentes) pueden tener dificultades con la estructura de las p\u00e1ginas complejas creadas con tablas HTML. No obstante, dise\u00f1ar una p\u00e1gina web exclusivamente con CSS no garantiza que la p\u00e1gina sea accesible. Velocidad de carga : el c\u00f3digo HTML de una p\u00e1gina dise\u00f1ada con tablas es mucho mayor que el c\u00f3digo de la misma p\u00e1gina dise\u00f1ada exclusivamente con CSS, por lo que tarda m\u00e1s tiempo en descargarse. En cualquier caso, si el usuario accede al sitio con una conexi\u00f3n de banda ancha y la p\u00e1gina es de un tama\u00f1o medio o reducido, las diferencias son casi imperceptibles. Sem\u00e1ntica : aunque resulta obvio, las tablas HTML s\u00f3lo se deben utilizar para mostrar datos cuya informaci\u00f3n s\u00f3lo se entiende en forma de filas y columnas. Utilizar tablas para crear la estructura completa de una p\u00e1gina es tan absurdo como utilizar por ejemplo la etiqueta <ul> para crear p\u00e1rrafos de texto. Por estos motivos, la estructura basada en tablas ha dado paso a la estructura basada exclusivamente en CSS. Aunque crear la estructura de las p\u00e1ginas s\u00f3lo con CSS presenta en ocasiones retos importantes, en general es m\u00e1s sencilla y flexible. En este cap\u00edtulo se muestra c\u00f3mo crear algunas de las estructuras o layouts m\u00e1s habituales de los dise\u00f1os web utilizando exclusivamente CSS.","title":"CSS"},{"location":"CSS/#capitulo-1-introduccion","text":"","title":"Cap\u00edtulo 1. Introducci\u00f3n"},{"location":"CSS/#que-es-css","text":"CSS es un lenguaje de hojas de estilos creado para controlar el aspecto o presentaci\u00f3n de los documentos electr\u00f3nicos definidos con HTML y XHTML. CSS es la mejor forma de separar los contenidos y su presentaci\u00f3n y es imprescindible para crear p\u00e1ginas web complejas. Separar la definici\u00f3n de los contenidos y la definici\u00f3n de su aspecto presenta numerosas ventajas, ya que obliga a crear documentos HTML/XHTML bien definidos y con significado completo (tambi\u00e9n llamados \"documentos sem\u00e1nticos\" ). Adem\u00e1s, mejora la accesibilidad del documento, reduce la complejidad de su mantenimiento y permite visualizar el mismo documento en infinidad de dispositivos diferentes. Al crear una p\u00e1gina web, se utiliza en primer lugar el lenguaje HTML/XHTML para marcar los contenidos, es decir, para designar la funci\u00f3n de cada elemento dentro de la p\u00e1gina: p\u00e1rrafo, titular, texto destacado, tabla, lista de elementos, etc. Una vez creados los contenidos, se utiliza el lenguaje CSS para definir el aspecto de cada elemento: color, tama\u00f1o y tipo de letra del texto, separaci\u00f3n horizontal y vertical entre elementos, posici\u00f3n de cada elemento dentro de la p\u00e1gina, etc.","title":"\u00bfQu\u00e9 es CSS?"},{"location":"CSS/#funcionamiento-basico-de-css","text":"Antes de que se generalizara el uso de CSS, los dise\u00f1adores de p\u00e1ginas web utilizaban etiquetas HTML especiales para modificar el aspecto de los elementos de la p\u00e1gina. El siguiente ejemplo muestra una p\u00e1gina HTML con estilos definidos sin utilizar CSS: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>Ejemplo de estilos sin CSS</title> </head> <body> <h1><font color=\"red\" face=\"Arial\" size=\"5\">Titular de la p\u00e1gina</font></h1> <p><font color=\"gray\" face=\"Verdana\" size=\"2\">Un p\u00e1rrafo de texto no muy largo.</font></p> </body> </html> !DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>Ejemplo de estilos con CSS</title> <style type=\"text/css\"> h1 { color: red; font-family: Arial; font-size: large; } p { color: gray; font-family: Verdana; font-size: medium; } </style> </head> <body> <h1>Titular de la p\u00e1gina</h1> <p>Un p\u00e1rrafo de texto no muy largo.</p> </body> </html> CSS permite separar los contenidos de la p\u00e1gina y la informaci\u00f3n sobre su aspecto. En el ejemplo anterior, dentro de la propia p\u00e1gina HTML se crea una zona especial en la que se incluye toda la informaci\u00f3n relacionada con los estilos de la p\u00e1gina.","title":"Funcionamiento b\u00e1sico de CSS"},{"location":"CSS/#incluir-css-en-el-mismo-documento-html","text":"Los estilos se definen en una zona espec\u00edfica del propio documento HTML. Se emplea la etiqueta <style> de HTML y solamente se pueden incluir en la cabecera del documento (s\u00f3lo dentro de la secci\u00f3n <head> ). Ejemplo: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>Ejemplo de estilos CSS en el propio documento</title> <style type=\"text/css\"> p { color: black; font-family: Verdana; } </style> </head> <body> <p>Un p\u00e1rrafo de texto.</p> </body> </html> Este m\u00e9todo se emplea cuando se define un n\u00famero peque\u00f1o de estilos o cuando se quieren incluir estilos espec\u00edficos en una determinada p\u00e1gina HTML que completen los estilos que se incluyen por defecto en todas las p\u00e1ginas del sitio web.","title":"Incluir CSS en el mismo documento HTML"},{"location":"CSS/#glosario-basico","text":"CSS define una serie de t\u00e9rminos que permiten describir cada una de las partes que componen los estilos CSS. El siguiente esquema muestra las partes que forman un estilo CSS muy b\u00e1sico: Figura 1.1 Componentes de un estilo CSS b\u00e1sico Los diferentes t\u00e9rminos se definen a continuaci\u00f3n: Regla: cada uno de los estilos que componen una hoja de estilos CSS. Cada regla est\u00e1 compuesta de una parte de \"selectores\" , un s\u00edmbolo de \"llave de apertura\" ( { ), otra parte denominada \"declaraci\u00f3n\" y por \u00faltimo, un s\u00edmbolo de \"llave de cierre\" ( } ). Selector: indica el elemento o elementos HTML a los que se aplica la regla CSS. Declaraci\u00f3n: especifica los estilos que se aplican a los elementos. Est\u00e1 compuesta por una o m\u00e1s propiedades CSS. Propiedad: caracter\u00edstica que se modifica en el elemento seleccionado, como por ejemplo su tama\u00f1o de letra, su color de fondo, etc. Valor: establece el nuevo valor de la caracter\u00edstica modificada en el elemento. Un archivo CSS puede contener un n\u00famero ilimitado de reglas CSS, cada regla se puede aplicar a varios selectores diferentes y cada declaraci\u00f3n puede incluir tantos pares propiedad/valor como se desee. El est\u00e1ndar CSS 2.1 define 115 propiedades, cada una con su propia lista de valores permitidos. Por su parte, los \u00faltimos borradores del est\u00e1ndar CSS 3 ya incluyen 239 propiedades.","title":"Glosario b\u00e1sico"},{"location":"CSS/#capitulo-2-selectores","text":"Para crear dise\u00f1os web profesionales, es imprescindible conocer y dominar los selectores de CSS. Como se vio en el cap\u00edtulo anterior, una regla de CSS est\u00e1 formada por una parte llamada \"selector\" y otra parte llamada \"declaraci\u00f3n\". La declaraci\u00f3n indica \"qu\u00e9 hay que hacer\" y el selector indica \"a qui\u00e9n hay que hac\u00e9rselo\" . Por lo tanto, los selectores son imprescindibles para aplicar de forma correcta los estilos CSS en una p\u00e1gina. A un mismo elemento HTML se le pueden aplicar varias reglas CSS y cada regla CSS puede aplicarse a un n\u00famero ilimitado de elementos. En otras palabras, una misma regla puede aplicarse sobre varios selectores y un mismo selector se puede utilizar en varias reglas. El est\u00e1ndar de CSS 2.1 incluye una docena de tipos diferentes de selectores, que permiten seleccionar de forma muy precisa elementos individuales o conjuntos de elementos dentro de una p\u00e1gina web. No obstante, la mayor\u00eda de p\u00e1ginas de los sitios web se pueden dise\u00f1ar utilizando solamente los cinco selectores b\u00e1sicos.","title":"Cap\u00edtulo 2. Selectores"},{"location":"CSS/#capitulo-3-modelo-de-cajas","text":"El modelo de cajas o \"box model\" es seguramente la caracter\u00edstica m\u00e1s importante del lenguaje de hojas de estilos CSS, ya que condiciona el dise\u00f1o de todas las p\u00e1ginas web. El modelo de cajas es el comportamiento de CSS que hace que todos los elementos de las p\u00e1ginas se representen mediante cajas rectangulares. Las cajas de una p\u00e1gina se crean autom\u00e1ticamente. Cada vez que se inserta una etiqueta HTML, se crea una nueva caja rectangular que encierra los contenidos de ese elemento. La siguiente imagen muestra las tres cajas rectangulares que crean las tres etiquetas HTML que incluye la p\u00e1gina: Figura 4.1 Las cajas se crean autom\u00e1ticamente al definir cada elemento HTML Las cajas de las p\u00e1ginas no son visibles a simple vista porque inicialmente no muestran ning\u00fan color de fondo ni ning\u00fan borde. La siguiente imagen muestra las cajas que forman la p\u00e1gina web de http://www.alistapart.com/ despu\u00e9s de forzar a que todas las cajas muestren su borde: Figura 4.2 Cajas que forman la p\u00e1gina alistapart.com","title":"Cap\u00edtulo 3. Modelo de cajas"},{"location":"CSS/#capitulo-4-posicionamiento-y-visualizacion","text":"Cuando los navegadores descargan el contenido HTML y CSS de las p\u00e1ginas web, aplican un procesamiento muy complejo antes de mostrar las p\u00e1ginas en la pantalla del usuario. Para cumplir con el modelo de cajas presentado en el cap\u00edtulo anterior, los navegadores crean una caja para representar a cada elemento de la p\u00e1gina HTML. Los factores que se tienen en cuenta para generar cada caja son: Las propiedades width y height de la caja (si est\u00e1n establecidas). El tipo de cada elemento HTML (elemento de bloque o elemento en l\u00ednea). Posicionamiento de la caja (normal, relativo, absoluto, fijo o flotante). Las relaciones entre elementos (d\u00f3nde se encuentra cada elemento, elementos descendientes, etc.) Otro tipo de informaci\u00f3n, como por ejemplo el tama\u00f1o de las im\u00e1genes y el tama\u00f1o de la ventana del navegador. En este cap\u00edtulo se muestran los cinco tipos de posicionamientos definidos para las cajas y se presentan otras propiedades que afectan a la forma en la que se visualizan las cajas.","title":"Cap\u00edtulo 4. Posicionamiento y visualizaci\u00f3n"},{"location":"CSS/#capitulo-5-imagenes","text":"","title":"Cap\u00edtulo 5. Im\u00e1genes"},{"location":"CSS/#establecer-la-anchura-y-altura-de-las-imagenes","text":"Utilizando las propiedades width y height , es posible mostrar las im\u00e1genes con cualquier altura/anchura, independientemente de su altura/anchura real: #destacada { width: 120px; height: 250px; } <img id=\"destacada\" src=\"imagen.png\" /> No obstante, si se utilizan alturas/anchuras diferentes de las reales, el navegador deforma las im\u00e1genes y el resultado est\u00e9tico es muy desagradable.","title":"Establecer la anchura y altura de las im\u00e1genes"},{"location":"CSS/#capitulo-6-tablas","text":"","title":"Cap\u00edtulo 6. Tablas"},{"location":"CSS/#estilos-basicos","text":"Cuando se aplican bordes a las celdas de una tabla, el aspecto por defecto con el que se muestra en un navegador es el siguiente: Figura 10.1 Aspecto por defecto de los bordes de una tabla El c\u00f3digo HTML y CSS del ejemplo anterior se muestra a continuaci\u00f3n: .normal { width: 250px; border: 1px solid #000; } .normal th, .normal td { border: 1px solid #000; } <table class=\"normal\" summary=\"Tabla gen\u00e9rica\"> <tr> <th scope=\"col\">A</th> <th scope=\"col\">B</th> <th scope=\"col\">C</th> <th scope=\"col\">D</th> <th scope=\"col\">E</th> </tr> ... </table>","title":"Estilos b\u00e1sicos"},{"location":"CSS/#capitulo-7-layout","text":"El dise\u00f1o de las p\u00e1ginas web habituales se divide en bloques: cabecera, men\u00fa, contenidos y pie de p\u00e1gina. Visualmente, los bloques se disponen en varias filas y columnas. Por este motivo, hace varios a\u00f1os la estructura de las p\u00e1ginas HTML se defin\u00eda mediante tablas. El desarrollo de CSS ha permitido que se puedan realizar los mismos dise\u00f1os sin utilizar tablas HTML. Las principales ventajas de dise\u00f1ar la estructura de las p\u00e1ginas web con CSS en vez de con tablas HTML son las siguientes: Mantenimiento : una p\u00e1gina dise\u00f1ada exclusivamente con CSS es mucho m\u00e1s f\u00e1cil de mantener que una p\u00e1gina dise\u00f1ada con tablas. Cambiar el aspecto de una p\u00e1gina creada con CSS es tan f\u00e1cil como modificar unas pocas reglas en las hojas de estilos. Sin embargo, realizar la misma modificaci\u00f3n en una p\u00e1gina creada con tablas supone un esfuerzo muy superior y es m\u00e1s probable cometer errores. Accesibilidad : las p\u00e1ginas creadas con CSS son m\u00e1s accesibles que las p\u00e1ginas dise\u00f1adas con tablas. De hecho, los navegadores que utilizan las personas discapacitadas (en especial las personas invidentes) pueden tener dificultades con la estructura de las p\u00e1ginas complejas creadas con tablas HTML. No obstante, dise\u00f1ar una p\u00e1gina web exclusivamente con CSS no garantiza que la p\u00e1gina sea accesible. Velocidad de carga : el c\u00f3digo HTML de una p\u00e1gina dise\u00f1ada con tablas es mucho mayor que el c\u00f3digo de la misma p\u00e1gina dise\u00f1ada exclusivamente con CSS, por lo que tarda m\u00e1s tiempo en descargarse. En cualquier caso, si el usuario accede al sitio con una conexi\u00f3n de banda ancha y la p\u00e1gina es de un tama\u00f1o medio o reducido, las diferencias son casi imperceptibles. Sem\u00e1ntica : aunque resulta obvio, las tablas HTML s\u00f3lo se deben utilizar para mostrar datos cuya informaci\u00f3n s\u00f3lo se entiende en forma de filas y columnas. Utilizar tablas para crear la estructura completa de una p\u00e1gina es tan absurdo como utilizar por ejemplo la etiqueta <ul> para crear p\u00e1rrafos de texto. Por estos motivos, la estructura basada en tablas ha dado paso a la estructura basada exclusivamente en CSS. Aunque crear la estructura de las p\u00e1ginas s\u00f3lo con CSS presenta en ocasiones retos importantes, en general es m\u00e1s sencilla y flexible. En este cap\u00edtulo se muestra c\u00f3mo crear algunas de las estructuras o layouts m\u00e1s habituales de los dise\u00f1os web utilizando exclusivamente CSS.","title":"Cap\u00edtulo 7. Layout"},{"location":"GIT/","text":"Git y Github Git: instalaci\u00f3n GitHub 2.1. Creaci\u00f3n de un repositorio Acceso Github desde local 3.1. Acceso con usuario y PAT ( personal access to ken ) 3.2. Acceso con ssh Proceso b\u00e1sico 1. Git: instalaci\u00f3n Es posible que ya instalado en m\u00e1quina virtual. Si no apt install git 2. GitHub Debe tener cuenta creada en GitHub. Se supone ya creada en otros m\u00f3dulos. 2.1. Creaci\u00f3n de un repositorio Creamos repositorio test-md-clases : privado con fichero README 3. Acceso Github desde local GitHub ya no permite usar desde l\u00ednea de comandos usuario y clave. En su lugar deber\u00e1 usar un token personal o activar el uso de claves SSH. Observe el resultado al intentar clonar un repositorio privado usando clone HTTPS: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Support for password authentication was removed on August 13, 2021. remote: Please see https://docs.github.com/en/get-started/getting-started- with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication. fatal: Autenticaci\u00f3n fall\u00f3 para 'https://github.com/angoies/test-md- clase.git/' alu@xdebian11:~$ 3.1. Acceso con usuario y PAT ( personal access token ) En este enlace https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ nos indica que ocurre y por qu\u00e9. Lo m\u00e1s destacable: Use of tokens offer a number of security benefits over password-based authentication: 1. Unique \u2013 tokens are specific to GitHub and can be generated per use or per device 2. Revocable \u2013 tokens can can be individually revoked at any time without needing to update unaffected credentials 3. Limited \u2013 tokens can be narrowly scoped to allow only the access necessary for the use case 4. Random \u2013 tokens are not subject to the types of dictionary or brute force attempts that simpler passwords that you need to remember or enter regularly might be Lo que nos interesa: tenemos que crear un token y utilizarlo en lugar de la clave . Enlace directo a creaci\u00f3n de tokens: https://github.com/settings/tokens Instrucciones de c\u00f3mo crear el token Para esta pr\u00e1ctica basta generar un token \"cl\u00e1sico\" y darle todos los permisos al scope repo. Almacene el token en un lugar seguro, lo necesitar\u00e1 a continuaci\u00f3n. Para comprobar que todo es correcto volvemos a intentar el clone HTTPS usando como password el token obtenido: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. alu@xdebian11:~$ Cada vez que intente acceder a un repositorio le pedir\u00e1 usuario y token. Para trabajar con m\u00e1s comodidad es posible almacenar usuario y token en cache usando el comando git config --global credential.helper 'cache --timeout 3600' ( timeout especificado en segundos). Tras ejecutarlo le pedir\u00e1 autenticarse una vez y eso datos se quedan en cache con ese tiempo de refresco. alu@xdebian11:~$ cd test-md-clase/ alu@xdebian11:~/test-md-clase$ git config --global credential.helper 'cache --timeout 3600' alu@xdebian11:~/test-md-clase$ git push Username for 'https://github.com': angoies Password for 'https://angoies@github.com': Everything up-to-date alu@xdebian11:~/test-md-clase$ git push Everything up-to-date alu@xdebian11:~/test-md-clase$ Es posible almacenar el token de forma permanente, pero tenga en cuenta que lo har\u00e1 en texto plano en el fichero ~/.git-credentials. $ git config --local credential.helper store $ git push http://example.com/repo.git Username: <type your username> Password: <type your password> [several days later] $ git push http://example.com/repo.git [your credentials are used automatically] Si quiere personalizar el fichero donde se almacena puede usar la opci\u00f3n git config --global credential.helper \"store --file ~/.my-credentials\" 3.2. Acceso con ssh Podemos usar otro modo de autenticaci\u00f3n: una clave SSH. Para ellos debe seguir los pasos indicados en Connecting to GitHub with SSH. Aviso : Tenga en cuenta que si ya hemos clonado el repositorio con HTTPS ser\u00e1 necesario modificar la configuraci\u00f3n de los remotos. Para ello puede seguir estas indicaciones https://docs.github.com/es/get- started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-https-to-ssh En nuestro caso borraremos el directorio creado con el clone HTTPS y volvemos a hacer un clone SSH. alu@xdebian11:~/test-md-clase$ cd .. alu@xdebian11:~$ rm -rf test-md-clase/ alu@xdebian11:~$ Si intentamos clonar: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... The authenticity of host 'github.com (140.82.121.3)' can't be established. ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'github.com,140.82.121.3' (ECDSA) to the list of known hosts. git@github.com: Permission denied (publickey). fatal: No se pudo leer del repositorio remoto. Por favor aseg\u00farate que tienes los permisos de acceso correctos y que el repositorio existe. alu@xdebian11:~$ Es necesario crear las claves SSH. Para ello tiene estos dos enlaces, crear en local y a\u00f1adir en GitHub: 1. Generaci\u00f3n de una nueva clave SSH 2. Agregar una clave SSH nueva a tu cuenta de GitHub Vea un ejemplo de creaci\u00f3n de las claves alu@xdebian11:~$ ssh-keygen -t ed25519 -C \"jgomez@iesromerovargas.com\" Generating public/private ed25519 key pair. Enter file in which to save the key (/home/alu/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/alu/.ssh/id_ed Your public key has been saved in /home/alu/.ssh/id_ed25519.pub The key fingerprint is: SHA256:10h/UuiiNSGtpnb7brUoPdyu79mQSyBtsPiQGHLgicc jgomez@iesromerovargas.com The key's randomart image is: +--[ED25519 256]--+ |. | | + o.. | |. E o o +.. | |. o o o B *. | |. + S X =. | | = * +.+ | | o +o ++. | |. ...*.o= | | .=+**. | +----[SHA256]-----+ alu@xdebian11:~$ ls -al .ssh/*.pub -rw-r--r-- 1 alu alu 108 feb 23 09:12 .ssh/id_ed25519.pub alu@xdebian11:~$ cat .ssh/id_ed25519.pub ssh-ed AAAAC3NzaC1lZDI1NTE5AAAAIIbaMp/uhRclwPz0AbQhooXxQN7IsUMfhqE9KtAOtoXa jgomez@iesromerovargas.com alu@xdebian11:~$ Luego seguimos los pasos para a\u00f1adir la clave SSH a GitHub y finalmente probamos: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... Enter passphrase for key '/home/alu/.ssh/id_ed25519': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 alu@xdebian11:~$ Puede \"cachear la autenticaci\u00f3n usando ssh-agent como se indica en este enlace. 4. Proceso b\u00e1sico clone del repositorio creado previamente alu@xdebian11:~$ git clone git@github.com:angoies/test-md-github.git Clonando en 'test-md-github'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Recibiendo objetos: 100% (3/3), listo. alu@xdebian11:~$ cd test-md-github/ alu@xdebian11:~/test-md-github$ ls README.md alu@xdebian11:~/test-md-github$ Trabajo en local: Modificar el fichero README.md alu@xdebian11:~/test-md-github$ code README.md alu@xdebian11:~/test-md-github$ status alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios no rastreados para el commit: (usa \"git add <archivo>...\" para actualizar lo que ser\u00e1 confirmado) (usa \"git restore <archivo>...\" para descartar los cambios en el directorio de trabajo) modificado: README.md sin cambios agregados al commit (usa \"git add\" y/o \"git commit -a\") alu@xdebian11:~/test-md-github$ add alu@xdebian11:~/test-md-github$ git add README.md alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios a ser confirmados: (usa \"git restore --staged <archivo>...\" para sacar del \u00e1rea de stage) modificado: README.md alu@xdebian11:~/test-md-github$ commit alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" Author identity unknown *** Por favor cu\u00e9ntame quien eres. Corre git config --global user.email \"you@example.com\" git config --global user.name \"Tu Nombre\" para configurar la identidad por defecto de tu cuenta. Omite --global para configurar tu identidad solo en este repositorio. fatal: no es posible auto-detectar la direcci\u00f3n de correo (se obtuvo 'alu@xdebian11.(none)') alu@xdebian11:~/test-md-github$ git config user.email \"jgomez@iesromerovargas.com\" alu@xdebian11:~/test-md-github$ git config user.name \"Jose Gomez\" alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" [main 64f7ed1] cambios en README para demo 1 file changed, 20 insertions(+) alu@xdebian11:~/test-md-github$ push alu@xdebian11:~/test-md-github$ git push Enumerando objetos: 5, listo. Contando objetos: 100% (5/5), listo. Comprimiendo objetos: 100% (2/2), listo. Escribiendo objetos: 100% (3/3), 431 bytes | 431.00 KiB/s, listo. Total 3 (delta 0), reusado 0 (delta 0), pack-reusado 0 To github.com:angoies/test-md-github.git c9a4725..64f7ed1 main -> main alu@xdebian11:~/test-md-github$","title":"GIT"},{"location":"GIT/#git-y-github","text":"Git: instalaci\u00f3n GitHub 2.1. Creaci\u00f3n de un repositorio Acceso Github desde local 3.1. Acceso con usuario y PAT ( personal access to ken ) 3.2. Acceso con ssh Proceso b\u00e1sico","title":"Git y Github"},{"location":"GIT/#1-git-instalacion","text":"Es posible que ya instalado en m\u00e1quina virtual. Si no apt install git","title":"1. Git: instalaci\u00f3n"},{"location":"GIT/#2-github","text":"Debe tener cuenta creada en GitHub. Se supone ya creada en otros m\u00f3dulos.","title":"2. GitHub"},{"location":"GIT/#21-creacion-de-un-repositorio","text":"Creamos repositorio test-md-clases : privado con fichero README","title":"2.1. Creaci\u00f3n de un repositorio"},{"location":"GIT/#3-acceso-github-desde-local","text":"GitHub ya no permite usar desde l\u00ednea de comandos usuario y clave. En su lugar deber\u00e1 usar un token personal o activar el uso de claves SSH. Observe el resultado al intentar clonar un repositorio privado usando clone HTTPS: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Support for password authentication was removed on August 13, 2021. remote: Please see https://docs.github.com/en/get-started/getting-started- with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication. fatal: Autenticaci\u00f3n fall\u00f3 para 'https://github.com/angoies/test-md- clase.git/' alu@xdebian11:~$","title":"3. Acceso Github desde local"},{"location":"GIT/#31-acceso-con-usuario-y-pat-personal-access-token","text":"En este enlace https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ nos indica que ocurre y por qu\u00e9. Lo m\u00e1s destacable: Use of tokens offer a number of security benefits over password-based authentication: 1. Unique \u2013 tokens are specific to GitHub and can be generated per use or per device 2. Revocable \u2013 tokens can can be individually revoked at any time without needing to update unaffected credentials 3. Limited \u2013 tokens can be narrowly scoped to allow only the access necessary for the use case 4. Random \u2013 tokens are not subject to the types of dictionary or brute force attempts that simpler passwords that you need to remember or enter regularly might be Lo que nos interesa: tenemos que crear un token y utilizarlo en lugar de la clave . Enlace directo a creaci\u00f3n de tokens: https://github.com/settings/tokens Instrucciones de c\u00f3mo crear el token Para esta pr\u00e1ctica basta generar un token \"cl\u00e1sico\" y darle todos los permisos al scope repo. Almacene el token en un lugar seguro, lo necesitar\u00e1 a continuaci\u00f3n. Para comprobar que todo es correcto volvemos a intentar el clone HTTPS usando como password el token obtenido: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. alu@xdebian11:~$ Cada vez que intente acceder a un repositorio le pedir\u00e1 usuario y token. Para trabajar con m\u00e1s comodidad es posible almacenar usuario y token en cache usando el comando git config --global credential.helper 'cache --timeout 3600' ( timeout especificado en segundos). Tras ejecutarlo le pedir\u00e1 autenticarse una vez y eso datos se quedan en cache con ese tiempo de refresco. alu@xdebian11:~$ cd test-md-clase/ alu@xdebian11:~/test-md-clase$ git config --global credential.helper 'cache --timeout 3600' alu@xdebian11:~/test-md-clase$ git push Username for 'https://github.com': angoies Password for 'https://angoies@github.com': Everything up-to-date alu@xdebian11:~/test-md-clase$ git push Everything up-to-date alu@xdebian11:~/test-md-clase$ Es posible almacenar el token de forma permanente, pero tenga en cuenta que lo har\u00e1 en texto plano en el fichero ~/.git-credentials. $ git config --local credential.helper store $ git push http://example.com/repo.git Username: <type your username> Password: <type your password> [several days later] $ git push http://example.com/repo.git [your credentials are used automatically] Si quiere personalizar el fichero donde se almacena puede usar la opci\u00f3n git config --global credential.helper \"store --file ~/.my-credentials\"","title":"3.1. Acceso con usuario y PAT ( personal access token )"},{"location":"GIT/#32-acceso-con-ssh","text":"Podemos usar otro modo de autenticaci\u00f3n: una clave SSH. Para ellos debe seguir los pasos indicados en Connecting to GitHub with SSH. Aviso : Tenga en cuenta que si ya hemos clonado el repositorio con HTTPS ser\u00e1 necesario modificar la configuraci\u00f3n de los remotos. Para ello puede seguir estas indicaciones https://docs.github.com/es/get- started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-https-to-ssh En nuestro caso borraremos el directorio creado con el clone HTTPS y volvemos a hacer un clone SSH. alu@xdebian11:~/test-md-clase$ cd .. alu@xdebian11:~$ rm -rf test-md-clase/ alu@xdebian11:~$ Si intentamos clonar: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... The authenticity of host 'github.com (140.82.121.3)' can't be established. ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'github.com,140.82.121.3' (ECDSA) to the list of known hosts. git@github.com: Permission denied (publickey). fatal: No se pudo leer del repositorio remoto. Por favor aseg\u00farate que tienes los permisos de acceso correctos y que el repositorio existe. alu@xdebian11:~$ Es necesario crear las claves SSH. Para ello tiene estos dos enlaces, crear en local y a\u00f1adir en GitHub: 1. Generaci\u00f3n de una nueva clave SSH 2. Agregar una clave SSH nueva a tu cuenta de GitHub Vea un ejemplo de creaci\u00f3n de las claves alu@xdebian11:~$ ssh-keygen -t ed25519 -C \"jgomez@iesromerovargas.com\" Generating public/private ed25519 key pair. Enter file in which to save the key (/home/alu/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/alu/.ssh/id_ed Your public key has been saved in /home/alu/.ssh/id_ed25519.pub The key fingerprint is: SHA256:10h/UuiiNSGtpnb7brUoPdyu79mQSyBtsPiQGHLgicc jgomez@iesromerovargas.com The key's randomart image is: +--[ED25519 256]--+ |. | | + o.. | |. E o o +.. | |. o o o B *. | |. + S X =. | | = * +.+ | | o +o ++. | |. ...*.o= | | .=+**. | +----[SHA256]-----+ alu@xdebian11:~$ ls -al .ssh/*.pub -rw-r--r-- 1 alu alu 108 feb 23 09:12 .ssh/id_ed25519.pub alu@xdebian11:~$ cat .ssh/id_ed25519.pub ssh-ed AAAAC3NzaC1lZDI1NTE5AAAAIIbaMp/uhRclwPz0AbQhooXxQN7IsUMfhqE9KtAOtoXa jgomez@iesromerovargas.com alu@xdebian11:~$ Luego seguimos los pasos para a\u00f1adir la clave SSH a GitHub y finalmente probamos: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... Enter passphrase for key '/home/alu/.ssh/id_ed25519': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 alu@xdebian11:~$ Puede \"cachear la autenticaci\u00f3n usando ssh-agent como se indica en este enlace.","title":"3.2. Acceso con ssh"},{"location":"GIT/#4-proceso-basico","text":"clone del repositorio creado previamente alu@xdebian11:~$ git clone git@github.com:angoies/test-md-github.git Clonando en 'test-md-github'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Recibiendo objetos: 100% (3/3), listo. alu@xdebian11:~$ cd test-md-github/ alu@xdebian11:~/test-md-github$ ls README.md alu@xdebian11:~/test-md-github$ Trabajo en local: Modificar el fichero README.md alu@xdebian11:~/test-md-github$ code README.md alu@xdebian11:~/test-md-github$ status alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios no rastreados para el commit: (usa \"git add <archivo>...\" para actualizar lo que ser\u00e1 confirmado) (usa \"git restore <archivo>...\" para descartar los cambios en el directorio de trabajo) modificado: README.md sin cambios agregados al commit (usa \"git add\" y/o \"git commit -a\") alu@xdebian11:~/test-md-github$ add alu@xdebian11:~/test-md-github$ git add README.md alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios a ser confirmados: (usa \"git restore --staged <archivo>...\" para sacar del \u00e1rea de stage) modificado: README.md alu@xdebian11:~/test-md-github$ commit alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" Author identity unknown *** Por favor cu\u00e9ntame quien eres. Corre git config --global user.email \"you@example.com\" git config --global user.name \"Tu Nombre\" para configurar la identidad por defecto de tu cuenta. Omite --global para configurar tu identidad solo en este repositorio. fatal: no es posible auto-detectar la direcci\u00f3n de correo (se obtuvo 'alu@xdebian11.(none)') alu@xdebian11:~/test-md-github$ git config user.email \"jgomez@iesromerovargas.com\" alu@xdebian11:~/test-md-github$ git config user.name \"Jose Gomez\" alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" [main 64f7ed1] cambios en README para demo 1 file changed, 20 insertions(+) alu@xdebian11:~/test-md-github$ push alu@xdebian11:~/test-md-github$ git push Enumerando objetos: 5, listo. Contando objetos: 100% (5/5), listo. Comprimiendo objetos: 100% (2/2), listo. Escribiendo objetos: 100% (3/3), 431 bytes | 431.00 KiB/s, listo. Total 3 (delta 0), reusado 0 (delta 0), pack-reusado 0 To github.com:angoies/test-md-github.git c9a4725..64f7ed1 main -> main alu@xdebian11:~/test-md-github$","title":"4. Proceso b\u00e1sico"},{"location":"HTML/","text":"Cap\u00edtulo 1. Introducci\u00f3n \u00bfQu\u00e9 es HTML? Defini\u00e9ndolo de forma sencilla, \"HTML es lo que se utiliza para crear todas las p\u00e1ginas web de Internet\". M\u00e1s concretamente, HTML es el lenguaje con el que se \"escriben\" la mayor\u00eda de p\u00e1ginas web. Los dise\u00f1adores utilizan el lenguaje HTML para crear sus p\u00e1ginas web, los programas que utilizan los dise\u00f1adores generan p\u00e1ginas escritas en HTML y los navegadores que utilizamos los usuarios muestran las p\u00e1ginas web despu\u00e9s de leer su contenido HTML. Aunque HTML es un lenguaje que utilizan los ordenadores y los programas de dise\u00f1o, es muy f\u00e1cil de aprender y escribir por parte de las personas. En realidad, HTML son las siglas de HyperText Markup Language y m\u00e1s adelante se ver\u00e1 el significado de cada una de estas palabras. HTML y XHTML El lenguaje XHTML es muy similar al lenguaje HTML. De hecho, XHTML no es m\u00e1s que una adaptaci\u00f3n de HTML al lenguaje XML. T\u00e9cnicamente, HTML es descendiente directo del lenguaje SGML, mientras que XHTML lo es del XML (que a su vez, tambi\u00e9n es descendiente de SGML). Figura 1.1 Esquema de la evoluci\u00f3n de HTML y XHTML Las p\u00e1ginas y documentos creados con XHTML son muy similares a las p\u00e1ginas y documentos HTML. Las discusiones sobre si HTML es mejor que XHTML o viceversa son recurrentes en el \u00e1mbito de la creaci\u00f3n de contenidos web, aunque no existe una conclusi\u00f3n ampliamente aceptada. Actualmente, entre HTML 4.01 y XHTML 1.0, la mayor\u00eda de dise\u00f1adores escogen XHTML. En un futuro cercano, si los dise\u00f1adores deben elegir entre HTML 5 y XHTML 1.1 o XHTML 2.0, quiz\u00e1s la elecci\u00f3n sea diferente. HTML y CSS Originalmente, las p\u00e1ginas HTML s\u00f3lo inclu\u00edan informaci\u00f3n sobre sus contenidos de texto e imagenes. Con el desarrollo del est\u00e1ndar HTML, las p\u00e1ginas empezaron a incluir tambi\u00e9n informaci\u00f3n sobre el aspecto de sus contenidos: tipos de letra, colores y m\u00e1rgenes. La posterior aparici\u00f3n de tecnolog\u00edas como JavaScript, provocaron que las p\u00e1ginas HTML tambi\u00e9n incluyeran el c\u00f3digo de las aplicaciones (llamadas scripts ) que se utilizan para crear p\u00e1ginas web din\u00e1micas. Incluir en una misma p\u00e1gina HTML los contenidos, el dise\u00f1o y la programaci\u00f3n complica en exceso su mantenimiento. Normalmente, los contenidos y el dise\u00f1o de la p\u00e1gina web son responsabilidad de diferentes personas, por lo que es conveniente separarlos. CSS es el mecanismo que permite separar los contenidos definidos mediante XHTML y el aspecto que deben presentar esos contenidos: Figura 1.2 Esquema de la separaci\u00f3n de los contenidos y su presentaci\u00f3n Una ventaja a\u00f1adida de la separaci\u00f3n de los contenidos y su presentaci\u00f3n es que los documentos XHTML creados son m\u00e1s flexibles, ya que se adaptan mejor a las diferentes plataformas: pantallas de ordenador, pantallas de dispositivos m\u00f3viles, impresoras y dispositivos utilizados por personas discapacitadas. De esta forma, utilizando exclusivamente XHTML se crean p\u00e1ginas web \"feas\" pero correctas. Aplicando CSS, se pueden crear p\u00e1ginas \"bonitas\" a partir de las p\u00e1ginas XHTML correctas. Cap\u00edtulo 2. Texto La mayor parte del contenido de las p\u00e1ginas HTML habituales est\u00e1 formado por texto, llegando a ser m\u00e1s del 90% del c\u00f3digo de la p\u00e1gina. Por este motivo, es muy importante conocer los elementos y etiquetas que define HTML para el manejo del texto. El lenguaje HTML incorpora al tratamiento del texto muchas de las ideas y normas establecidas en otros entornos de publicaci\u00f3n de contenidos. De esta forma, HTML define etiquetas para estructurar el contenido en secciones y p\u00e1rrafos y define otras etiquetas para marcar elementos importantes dentro del texto. La tarea inicial del editor de contenidos HTML consiste en estructurar el texto original definiendo sus p\u00e1rrafos, titulares y t\u00edtulos de secci\u00f3n, como se muestra en la siguiente imagen: Figura 3.1 Resultado de estructurar un texto sencillo Cap\u00edtulo 3. Enlaces El lenguaje de marcado HTML se defini\u00f3 teniendo en cuenta algunas de las caracter\u00edsticas que exist\u00edan en ese momento para la publicaci\u00f3n digital de contenidos. Entre los conceptos utilizados en su creaci\u00f3n, se encuentra el mecanismo de \"hipertexto\" . De hecho, las letras \"HT\" de la sigla HTML significan \"hipertexto\" ( hypertext en ingl\u00e9s), por lo que el significado completo de HTML podr\u00eda traducirse como \"lenguaje de marcado para hipertexto\". La incorporaci\u00f3n del hipertexto fue una de las claves del \u00e9xito del lenguaje HTML, ya que permiti\u00f3 crear documentos interactivos que proporcionan informaci\u00f3n adicional cuando se solicita. El elemento principal del hipertexto es el \"hiperenlace\" , tambi\u00e9n llamado \"enlace web\" o simplemente \"enlace\". Los enlaces se utilizan para establecer relaciones entre dos recursos. Aunque la mayor\u00eda de enlaces relacionan p\u00e1ginas web, tambi\u00e9n es posible enlazar otros recursos como im\u00e1genes, documentos y archivos. Una caracter\u00edstica que no se suele tener en cuenta en los enlaces es que est\u00e1n formados por dos extremos y un sentido. En otras palabras, el enlace comienza en un recurso y apunta hacia otro recurso. Cada uno de los dos extremos se llaman \"anchors\" en ingl\u00e9s, que se puede traducir literalmente como \"anclas\". Cap\u00edtulo 4. Listas En ocasiones, es posible agrupar determinadas palabras o frases en un conjunto de elementos que tienen m\u00e1s significado de forma conjunta. El men\u00fa de navegaci\u00f3n de un sitio web por ejemplo est\u00e1 formado por un grupo de palabras. Aunque cada palabra por separado tiene sentido, de forma conjunta constituyen el men\u00fa de navegaci\u00f3n de la p\u00e1gina, por lo que su significado conjunto es mayor que por separado. El lenguaje HTML define tres tipos diferentes de listas para agrupar los elementos: listas no ordenadas (se trata de una colecci\u00f3n simple de elementos en la que no importa su orden), listas ordenadas (similar a la anterior, pero los elementos est\u00e1n numerados y por tanto, importa su orden) y listas de definici\u00f3n (un conjunto de t\u00e9rminos y definiciones similar a un diccionario). Cap\u00edtulo 5. Im\u00e1genes Las im\u00e1genes son uno de los elementos m\u00e1s importantes de las p\u00e1ginas web. De hecho, pr\u00e1cticamente todas las p\u00e1ginas web contienen alguna imagen y la mayor\u00eda incluyen decenas de im\u00e1genes. Dentro de las im\u00e1genes que se pueden incluir en una p\u00e1gina HTML se deben distinguir dos tipos: las im\u00e1genes de contenido y las im\u00e1genes de adorno . Las im\u00e1genes de contenido son las que proporcionan informaci\u00f3n y complementan la informaci\u00f3n textual. Las im\u00e1genes de adorno son las que se utilizan para hacer bordes redondeados, para mostrar peque\u00f1os iconos en las listas de elementos, para mostrar fondos de p\u00e1gina, etc. Las im\u00e1genes de contenido se incluyen directamente en el c\u00f3digo HTML mediante la etiqueta <img> y las im\u00e1genes de adorno no se deber\u00edan incluir en el c\u00f3digo HTML, sino que deber\u00edan emplearse hojas de estilos CSS para mostrarlas. A continuaci\u00f3n se muestra la definici\u00f3n de la etiqueta <img> , utilizada para incluir las im\u00e1genes en las p\u00e1ginas HTML: Etiqueta Atributos comunes b\u00e1sicos , internacionalizaci\u00f3n y eventos Atributos propios src = \"url\" - Indica la URL de la imagen que se muestra alt = \"texto\" - Descripci\u00f3n corta de la imagen longdesc = \"url\" - Indica una URL en la que puede encontrarse una descripci\u00f3n m\u00e1s detallada de la imagen name = \"texto\" - Nombre del elemento imagen height = \"unidad_de_medida\" - Indica la altura con la que se debe mostrar la imagen (no es obligatorio que coincida con la altura original de la imagen) width = \"unidad_de_medida\" - Indica la anchura con la que se debe mostrar la imagen (no es obligatorio que coincida con la anchura original de la imagen) Tipo de elemento En l\u00ednea y etiqueta vac\u00eda Descripci\u00f3n Se emplea para incluir im\u00e1genes en los documentos Los dos atributos requeridos son src y alt . El atributo src es similar al atributo href de los enlaces, ya que establece la URL de la imagen que se va a mostrar en la p\u00e1gina. Las URL indicadas pueden ser absolutas o relativas. El atributo alt permite describir el contenido de la imagen mediante un texto breve. Las descripciones deben tener una longitud inferior a 1024 caracteres y son \u00fatiles para las personas y dispositivos discapacitados que no pueden acceder a las im\u00e1genes. Ejemplo sencillo para incluir una imagen: <img src=\"logotipo.gif\" alt=\"Logotipo de Mi Sitio\" /> Como <img> es una etiqueta vac\u00eda, no tiene etiqueta de cierre. No obstante, para que la p\u00e1gina XHTML sea v\u00e1lida, todas las etiquetas deben estar cerradas. Como ya se explic\u00f3 anteriormente, para cerrar una etiqueta vac\u00eda se incluyen los caracteres /> al final de la etiqueta. Cap\u00edtulo 6. Tablas Desde sus primeras versiones, HTML incluy\u00f3 el soporte para crear tablas de datos en las p\u00e1ginas web. Adem\u00e1s de ser sencillo, el modelo definido por HTML es muy flexible y bastante completo. Las tablas en HTML utilizan los mismos conceptos de filas, columnas, cabeceras y t\u00edtulos que los que se utilizan en cualquier otro entorno de publicaci\u00f3n de documentos: Figura 7.1 Partes que componen una tabla compleja Las tablas de HTML puede contener elementos simples, agrupaciones de filas y de columnas, cabeceras y pies de tabla, subdivisiones, cabeceras m\u00faltiples y otros elementos complejos. A pesar de que las tablas HTML son f\u00e1ciles de comprender y utilizar, son uno de los elementos m\u00e1s pol\u00e9micos de HTML. El problema de las tablas es que no siempre se utilizan adecuadamente. Aunque parezca obvio, las tablas se deben utilizar para mostrar informaci\u00f3n tabular. Hasta hace unos a\u00f1os, las tablas tambi\u00e9n se utilizaban para definir la estructura de las p\u00e1ginas web. La cabecera de la p\u00e1gina era una fila de una gran tabla, el pie de p\u00e1gina era otra fila de esta tabla y la zona de contenidos estaba formada por varias columnas dentro de esa gran tabla. Aunque algunos malos dise\u00f1adores siguen utilizando hoy en d\u00eda las tablas para definir la estructura completa de las p\u00e1ginas web, se trata de una t\u00e9cnica obsoleta y nada recomendable. El motivo es que se complica en exceso el c\u00f3digo HTML y su mantenimiento es muy complejo. La soluci\u00f3n correcta para definir la estructura de las p\u00e1ginas consiste en la utilizaci\u00f3n de hojas de estilos CSS.","title":"HTML"},{"location":"HTML/#capitulo-1-introduccion","text":"","title":"Cap\u00edtulo 1. Introducci\u00f3n"},{"location":"HTML/#que-es-html","text":"Defini\u00e9ndolo de forma sencilla, \"HTML es lo que se utiliza para crear todas las p\u00e1ginas web de Internet\". M\u00e1s concretamente, HTML es el lenguaje con el que se \"escriben\" la mayor\u00eda de p\u00e1ginas web. Los dise\u00f1adores utilizan el lenguaje HTML para crear sus p\u00e1ginas web, los programas que utilizan los dise\u00f1adores generan p\u00e1ginas escritas en HTML y los navegadores que utilizamos los usuarios muestran las p\u00e1ginas web despu\u00e9s de leer su contenido HTML. Aunque HTML es un lenguaje que utilizan los ordenadores y los programas de dise\u00f1o, es muy f\u00e1cil de aprender y escribir por parte de las personas. En realidad, HTML son las siglas de HyperText Markup Language y m\u00e1s adelante se ver\u00e1 el significado de cada una de estas palabras.","title":"\u00bfQu\u00e9 es HTML?"},{"location":"HTML/#html-y-xhtml","text":"El lenguaje XHTML es muy similar al lenguaje HTML. De hecho, XHTML no es m\u00e1s que una adaptaci\u00f3n de HTML al lenguaje XML. T\u00e9cnicamente, HTML es descendiente directo del lenguaje SGML, mientras que XHTML lo es del XML (que a su vez, tambi\u00e9n es descendiente de SGML). Figura 1.1 Esquema de la evoluci\u00f3n de HTML y XHTML Las p\u00e1ginas y documentos creados con XHTML son muy similares a las p\u00e1ginas y documentos HTML. Las discusiones sobre si HTML es mejor que XHTML o viceversa son recurrentes en el \u00e1mbito de la creaci\u00f3n de contenidos web, aunque no existe una conclusi\u00f3n ampliamente aceptada. Actualmente, entre HTML 4.01 y XHTML 1.0, la mayor\u00eda de dise\u00f1adores escogen XHTML. En un futuro cercano, si los dise\u00f1adores deben elegir entre HTML 5 y XHTML 1.1 o XHTML 2.0, quiz\u00e1s la elecci\u00f3n sea diferente.","title":"HTML y XHTML"},{"location":"HTML/#html-y-css","text":"Originalmente, las p\u00e1ginas HTML s\u00f3lo inclu\u00edan informaci\u00f3n sobre sus contenidos de texto e imagenes. Con el desarrollo del est\u00e1ndar HTML, las p\u00e1ginas empezaron a incluir tambi\u00e9n informaci\u00f3n sobre el aspecto de sus contenidos: tipos de letra, colores y m\u00e1rgenes. La posterior aparici\u00f3n de tecnolog\u00edas como JavaScript, provocaron que las p\u00e1ginas HTML tambi\u00e9n incluyeran el c\u00f3digo de las aplicaciones (llamadas scripts ) que se utilizan para crear p\u00e1ginas web din\u00e1micas. Incluir en una misma p\u00e1gina HTML los contenidos, el dise\u00f1o y la programaci\u00f3n complica en exceso su mantenimiento. Normalmente, los contenidos y el dise\u00f1o de la p\u00e1gina web son responsabilidad de diferentes personas, por lo que es conveniente separarlos. CSS es el mecanismo que permite separar los contenidos definidos mediante XHTML y el aspecto que deben presentar esos contenidos: Figura 1.2 Esquema de la separaci\u00f3n de los contenidos y su presentaci\u00f3n Una ventaja a\u00f1adida de la separaci\u00f3n de los contenidos y su presentaci\u00f3n es que los documentos XHTML creados son m\u00e1s flexibles, ya que se adaptan mejor a las diferentes plataformas: pantallas de ordenador, pantallas de dispositivos m\u00f3viles, impresoras y dispositivos utilizados por personas discapacitadas. De esta forma, utilizando exclusivamente XHTML se crean p\u00e1ginas web \"feas\" pero correctas. Aplicando CSS, se pueden crear p\u00e1ginas \"bonitas\" a partir de las p\u00e1ginas XHTML correctas.","title":"HTML y CSS"},{"location":"HTML/#capitulo-2-texto","text":"La mayor parte del contenido de las p\u00e1ginas HTML habituales est\u00e1 formado por texto, llegando a ser m\u00e1s del 90% del c\u00f3digo de la p\u00e1gina. Por este motivo, es muy importante conocer los elementos y etiquetas que define HTML para el manejo del texto. El lenguaje HTML incorpora al tratamiento del texto muchas de las ideas y normas establecidas en otros entornos de publicaci\u00f3n de contenidos. De esta forma, HTML define etiquetas para estructurar el contenido en secciones y p\u00e1rrafos y define otras etiquetas para marcar elementos importantes dentro del texto. La tarea inicial del editor de contenidos HTML consiste en estructurar el texto original definiendo sus p\u00e1rrafos, titulares y t\u00edtulos de secci\u00f3n, como se muestra en la siguiente imagen: Figura 3.1 Resultado de estructurar un texto sencillo","title":"Cap\u00edtulo 2. Texto"},{"location":"HTML/#capitulo-3-enlaces","text":"El lenguaje de marcado HTML se defini\u00f3 teniendo en cuenta algunas de las caracter\u00edsticas que exist\u00edan en ese momento para la publicaci\u00f3n digital de contenidos. Entre los conceptos utilizados en su creaci\u00f3n, se encuentra el mecanismo de \"hipertexto\" . De hecho, las letras \"HT\" de la sigla HTML significan \"hipertexto\" ( hypertext en ingl\u00e9s), por lo que el significado completo de HTML podr\u00eda traducirse como \"lenguaje de marcado para hipertexto\". La incorporaci\u00f3n del hipertexto fue una de las claves del \u00e9xito del lenguaje HTML, ya que permiti\u00f3 crear documentos interactivos que proporcionan informaci\u00f3n adicional cuando se solicita. El elemento principal del hipertexto es el \"hiperenlace\" , tambi\u00e9n llamado \"enlace web\" o simplemente \"enlace\". Los enlaces se utilizan para establecer relaciones entre dos recursos. Aunque la mayor\u00eda de enlaces relacionan p\u00e1ginas web, tambi\u00e9n es posible enlazar otros recursos como im\u00e1genes, documentos y archivos. Una caracter\u00edstica que no se suele tener en cuenta en los enlaces es que est\u00e1n formados por dos extremos y un sentido. En otras palabras, el enlace comienza en un recurso y apunta hacia otro recurso. Cada uno de los dos extremos se llaman \"anchors\" en ingl\u00e9s, que se puede traducir literalmente como \"anclas\".","title":"Cap\u00edtulo 3. Enlaces"},{"location":"HTML/#capitulo-4-listas","text":"En ocasiones, es posible agrupar determinadas palabras o frases en un conjunto de elementos que tienen m\u00e1s significado de forma conjunta. El men\u00fa de navegaci\u00f3n de un sitio web por ejemplo est\u00e1 formado por un grupo de palabras. Aunque cada palabra por separado tiene sentido, de forma conjunta constituyen el men\u00fa de navegaci\u00f3n de la p\u00e1gina, por lo que su significado conjunto es mayor que por separado. El lenguaje HTML define tres tipos diferentes de listas para agrupar los elementos: listas no ordenadas (se trata de una colecci\u00f3n simple de elementos en la que no importa su orden), listas ordenadas (similar a la anterior, pero los elementos est\u00e1n numerados y por tanto, importa su orden) y listas de definici\u00f3n (un conjunto de t\u00e9rminos y definiciones similar a un diccionario).","title":"Cap\u00edtulo 4. Listas"},{"location":"HTML/#capitulo-5-imagenes","text":"Las im\u00e1genes son uno de los elementos m\u00e1s importantes de las p\u00e1ginas web. De hecho, pr\u00e1cticamente todas las p\u00e1ginas web contienen alguna imagen y la mayor\u00eda incluyen decenas de im\u00e1genes. Dentro de las im\u00e1genes que se pueden incluir en una p\u00e1gina HTML se deben distinguir dos tipos: las im\u00e1genes de contenido y las im\u00e1genes de adorno . Las im\u00e1genes de contenido son las que proporcionan informaci\u00f3n y complementan la informaci\u00f3n textual. Las im\u00e1genes de adorno son las que se utilizan para hacer bordes redondeados, para mostrar peque\u00f1os iconos en las listas de elementos, para mostrar fondos de p\u00e1gina, etc. Las im\u00e1genes de contenido se incluyen directamente en el c\u00f3digo HTML mediante la etiqueta <img> y las im\u00e1genes de adorno no se deber\u00edan incluir en el c\u00f3digo HTML, sino que deber\u00edan emplearse hojas de estilos CSS para mostrarlas. A continuaci\u00f3n se muestra la definici\u00f3n de la etiqueta <img> , utilizada para incluir las im\u00e1genes en las p\u00e1ginas HTML: Etiqueta Atributos comunes b\u00e1sicos , internacionalizaci\u00f3n y eventos Atributos propios src = \"url\" - Indica la URL de la imagen que se muestra alt = \"texto\" - Descripci\u00f3n corta de la imagen longdesc = \"url\" - Indica una URL en la que puede encontrarse una descripci\u00f3n m\u00e1s detallada de la imagen name = \"texto\" - Nombre del elemento imagen height = \"unidad_de_medida\" - Indica la altura con la que se debe mostrar la imagen (no es obligatorio que coincida con la altura original de la imagen) width = \"unidad_de_medida\" - Indica la anchura con la que se debe mostrar la imagen (no es obligatorio que coincida con la anchura original de la imagen) Tipo de elemento En l\u00ednea y etiqueta vac\u00eda Descripci\u00f3n Se emplea para incluir im\u00e1genes en los documentos Los dos atributos requeridos son src y alt . El atributo src es similar al atributo href de los enlaces, ya que establece la URL de la imagen que se va a mostrar en la p\u00e1gina. Las URL indicadas pueden ser absolutas o relativas. El atributo alt permite describir el contenido de la imagen mediante un texto breve. Las descripciones deben tener una longitud inferior a 1024 caracteres y son \u00fatiles para las personas y dispositivos discapacitados que no pueden acceder a las im\u00e1genes. Ejemplo sencillo para incluir una imagen: <img src=\"logotipo.gif\" alt=\"Logotipo de Mi Sitio\" /> Como <img> es una etiqueta vac\u00eda, no tiene etiqueta de cierre. No obstante, para que la p\u00e1gina XHTML sea v\u00e1lida, todas las etiquetas deben estar cerradas. Como ya se explic\u00f3 anteriormente, para cerrar una etiqueta vac\u00eda se incluyen los caracteres /> al final de la etiqueta.","title":"Cap\u00edtulo 5. Im\u00e1genes"},{"location":"HTML/#capitulo-6-tablas","text":"Desde sus primeras versiones, HTML incluy\u00f3 el soporte para crear tablas de datos en las p\u00e1ginas web. Adem\u00e1s de ser sencillo, el modelo definido por HTML es muy flexible y bastante completo. Las tablas en HTML utilizan los mismos conceptos de filas, columnas, cabeceras y t\u00edtulos que los que se utilizan en cualquier otro entorno de publicaci\u00f3n de documentos: Figura 7.1 Partes que componen una tabla compleja Las tablas de HTML puede contener elementos simples, agrupaciones de filas y de columnas, cabeceras y pies de tabla, subdivisiones, cabeceras m\u00faltiples y otros elementos complejos. A pesar de que las tablas HTML son f\u00e1ciles de comprender y utilizar, son uno de los elementos m\u00e1s pol\u00e9micos de HTML. El problema de las tablas es que no siempre se utilizan adecuadamente. Aunque parezca obvio, las tablas se deben utilizar para mostrar informaci\u00f3n tabular. Hasta hace unos a\u00f1os, las tablas tambi\u00e9n se utilizaban para definir la estructura de las p\u00e1ginas web. La cabecera de la p\u00e1gina era una fila de una gran tabla, el pie de p\u00e1gina era otra fila de esta tabla y la zona de contenidos estaba formada por varias columnas dentro de esa gran tabla. Aunque algunos malos dise\u00f1adores siguen utilizando hoy en d\u00eda las tablas para definir la estructura completa de las p\u00e1ginas web, se trata de una t\u00e9cnica obsoleta y nada recomendable. El motivo es que se complica en exceso el c\u00f3digo HTML y su mantenimiento es muy complejo. La soluci\u00f3n correcta para definir la estructura de las p\u00e1ginas consiste en la utilizaci\u00f3n de hojas de estilos CSS.","title":"Cap\u00edtulo 6. Tablas"},{"location":"MARKDOWN/","text":"Markdown Introducci\u00f3n Utilizaci\u00f3n B\u00e1sico Tareas Enlaces 1. Introducci\u00f3n Markdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Its key design goal was readability, that the language be readable as-is, Ojo con las versiones. Por ejemplo la de GitHub nos dice: 1.1What is GitHub Flavored Markdown? GitHub Flavored Markdown, often shortened as GFM, is the dialect of Markdown that is currently supported for user content on GitHub.com and GitHub Enterprise. This formal specification, based on the CommonMark Spec, defines the syntax and semantics of this dialect. GFM is a strict superset of CommonMark. All the features which are supported in GitHub user content and that are not specified on the original CommonMark Spec are hence known as extensions, and highlighted as such. While GFM supports a wide range of inputs, it\u2019s worth noting that GitHub.com and GitHub Enterprise perform additional post-processing and sanitization after GFM is converted to HTML to ensure security and consistency of the website. 2. Utilizaci\u00f3n Documentaci\u00f3n (permite control de versiones) GitHub (publica directamente en formato Markdown) o en GitHub Pages usando mkdocs Mapas (markmap) Presentaciones (marp) 3. B\u00e1sico En general debe ser suficiente este conjunto de marcas: Cabeceras de nivel P\u00e1rrafos Citas Listas 02 _markdown.md 8 / 3 / 2023 / Enlaces Im\u00e1genes C\u00f3digo Bloques de c\u00f3digo Separadores strong / em Y puede ampliar con otras marcas: Tablas Listas de tareas emoticonos 4. Tareas Crear documento Markdown. Incluir distintos tipos de marcas. Ampliar: a\u00f1adir plugins VScode. Intentar numeraci\u00f3n de secciones/cabeceras, a\u00f1adir tabla de contenidos o imprimir a PDF. Ampliar: a\u00f1adir plugin VScode. Crear esquema que se traduce a mapa (markmap) 5. Enlaces Markdown original: https://daringfireball.net/projects/markdown/basics Tutorial: https://tutorialmarkdown.com/sintaxis Especificaciones: CommonMark Spec: https://spec.commonmark.org/0.30/ Github Markdown: https://github.github.com/gfm/#what-is-github-flavored-markdown Utilidades: Markmap: https://markmap.js.org/repl Marp: https://marp.app/ Typora: https://typora.io/ VScode plugins: Markmap:https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap- vscode Marp: https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode MD All in One: https://marketplace.visualstudio.com/items? itemName=yzhang.markdown-all-in-one Markdown to PDF: https://marketplace.visualstudio.com/items? itemName=yzane.markdown-pdf","title":"MARKDOWN"},{"location":"MARKDOWN/#markdown","text":"Introducci\u00f3n Utilizaci\u00f3n B\u00e1sico Tareas Enlaces","title":"Markdown"},{"location":"MARKDOWN/#1-introduccion","text":"Markdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Its key design goal was readability, that the language be readable as-is, Ojo con las versiones. Por ejemplo la de GitHub nos dice: 1.1What is GitHub Flavored Markdown? GitHub Flavored Markdown, often shortened as GFM, is the dialect of Markdown that is currently supported for user content on GitHub.com and GitHub Enterprise. This formal specification, based on the CommonMark Spec, defines the syntax and semantics of this dialect. GFM is a strict superset of CommonMark. All the features which are supported in GitHub user content and that are not specified on the original CommonMark Spec are hence known as extensions, and highlighted as such. While GFM supports a wide range of inputs, it\u2019s worth noting that GitHub.com and GitHub Enterprise perform additional post-processing and sanitization after GFM is converted to HTML to ensure security and consistency of the website.","title":"1. Introducci\u00f3n"},{"location":"MARKDOWN/#2-utilizacion","text":"Documentaci\u00f3n (permite control de versiones) GitHub (publica directamente en formato Markdown) o en GitHub Pages usando mkdocs Mapas (markmap) Presentaciones (marp)","title":"2. Utilizaci\u00f3n"},{"location":"MARKDOWN/#3-basico","text":"En general debe ser suficiente este conjunto de marcas: Cabeceras de nivel P\u00e1rrafos Citas Listas 02 _markdown.md 8 / 3 / 2023 / Enlaces Im\u00e1genes C\u00f3digo Bloques de c\u00f3digo Separadores strong / em Y puede ampliar con otras marcas: Tablas Listas de tareas emoticonos","title":"3. B\u00e1sico"},{"location":"MARKDOWN/#4-tareas","text":"Crear documento Markdown. Incluir distintos tipos de marcas. Ampliar: a\u00f1adir plugins VScode. Intentar numeraci\u00f3n de secciones/cabeceras, a\u00f1adir tabla de contenidos o imprimir a PDF. Ampliar: a\u00f1adir plugin VScode. Crear esquema que se traduce a mapa (markmap)","title":"4. Tareas"},{"location":"MARKDOWN/#5-enlaces","text":"Markdown original: https://daringfireball.net/projects/markdown/basics Tutorial: https://tutorialmarkdown.com/sintaxis Especificaciones: CommonMark Spec: https://spec.commonmark.org/0.30/ Github Markdown: https://github.github.com/gfm/#what-is-github-flavored-markdown Utilidades: Markmap: https://markmap.js.org/repl Marp: https://marp.app/ Typora: https://typora.io/ VScode plugins: Markmap:https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap- vscode Marp: https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode MD All in One: https://marketplace.visualstudio.com/items? itemName=yzhang.markdown-all-in-one Markdown to PDF: https://marketplace.visualstudio.com/items? itemName=yzane.markdown-pdf","title":"5. Enlaces"},{"location":"XML/","text":"Cap\u00edtulo 1. Introducci\u00f3n \u00bfQu\u00e9 es XML? XML: antes de.. \u25cf Es libre y abierto. \u25cf No es tan nuevo: Viene de a\u00f1os 70 \u25cf Ahora en plena evoluci\u00f3n o ca\u00edda.. \u25cf Documentos: \u25cb antes texto=documento. \u25cb Ahora: documento es un fichero electr\u00f3nico para cualquier media (texto, video, audio..) \u25cf Destinatarios del documento: \u25cb Personas que los \u201cconsumen\u201d \u25cb M\u00e1quinas que los \u201cconsumen\u201d, para presentarlos o combinarlos con otros, etc. Concepto de \u201cmarca\u201d \u25cf Forma de a\u00f1adir informaci\u00f3n sobre los datos junto a los propios datos. \u25cf Insertamos s\u00edmbolos o caracteres en un documento para indicar su estructura l\u00f3gica o f\u00edsica \u25cf Objetivo: separar los datos de su posterior tratamiento (por ejemplo apariencia) \u25cf Si has estudiado HTML, que tambi\u00e9n es un lenguaje de marcas te ser\u00e1 familiar. XML \u25cf NO es un lenguaje de programaci\u00f3n \u25cb Es un lenguaje de marcas \u25cb Es un \u201cmetalenguaje\u201d \u25cf Un metalenguaje es un lenguaje usado para describir formalmente otro lenguaje. \u25cf XML permite a los desarrolladores crear lenguajes especializados, \u25cb todos en com\u00fan: respetan la especificaci\u00f3n XML. Historia (II): Ejemplo GML :h2. Definitions: :ol. i.1. noun, a gem variety of corundum in transparent or translucent crystals of a color other than red; especially, a transparentrich blue :li.2. noun, a gem of such corundum :li.3. noun, a deep purplish blue color :li.4. adjective, made of or resembling a sapphire gem :li.5. adjective, having the color of a blue sapphire :eol. SGML: Standard Generalized Markup Language \u25cf ANSI (American National Standards Institute) a partir de GML 1980-84. \u25cb ISO(International Organization for Standardization): 1986, con ANSI \u25cf Se centra relaci\u00f3n estructura y contenido, separa \u25cb Estructura de los datos \u25cb Contenidos \u25cb Estilo \u25cf Formaliza concepto DTD: documento separado que especifica la estructura del mismo. XML \u25cf Es un lenguaje de marcas y un metalenguaje los desarrolladores crean lenguajes espec\u00edficos con sus propias etiquetas, estructuras, etc. \u25cf No limita marcas a crear, s\u00f3lo impone restricciones. \u25cf Independiente del SW y de la plataforma un mismo documento XML puede ser usado en cualquier SO con cualquier herramienta de desarrollo o publicaci\u00f3n. \u25cf Es un formato p\u00fablico, un est\u00e1ndar abierto. No depende de empresa o pa\u00eds. \u25cf F\u00e1cil de implementar: herramientas gratuitas. \u25cf El dise\u00f1ador se puede centrar en uso de etiquetas, en contenidos y su estructura. Formatear el contenido es un proceso posterior (e incluso a veces secundario) \u25cf A los ficheros xml se les comprueba la sintaxis, y se puede comprobar la estructura (validaci\u00f3n) \u25cf Pensar en XML como en una versi\u00f3n menor de SGML, no como HTLM++ XML se dise\u00f1\u00f3 pensando en la estructura y significado de los datos. HTML, en cambio, con la forma en la que se presentan los datos. \u25cf Las etiquetas XML describen datos y se usan como parte de transacciones de negocios, intercambios de informaci\u00f3n, etc. la sintaxis XML requiere precisi\u00f3n y seguir estrictamente las reglas gramaticales. Esto no ocurr\u00eda con HTML hasta hace poco.","title":"XML"},{"location":"XML/#capitulo-1-introduccion","text":"","title":"Cap\u00edtulo 1. Introducci\u00f3n"},{"location":"XML/#que-es-xml","text":"XML: antes de.. \u25cf Es libre y abierto. \u25cf No es tan nuevo: Viene de a\u00f1os 70 \u25cf Ahora en plena evoluci\u00f3n o ca\u00edda.. \u25cf Documentos: \u25cb antes texto=documento. \u25cb Ahora: documento es un fichero electr\u00f3nico para cualquier media (texto, video, audio..) \u25cf Destinatarios del documento: \u25cb Personas que los \u201cconsumen\u201d \u25cb M\u00e1quinas que los \u201cconsumen\u201d, para presentarlos o combinarlos con otros, etc.","title":"\u00bfQu\u00e9 es XML?"},{"location":"XML/#concepto-de-marca","text":"\u25cf Forma de a\u00f1adir informaci\u00f3n sobre los datos junto a los propios datos. \u25cf Insertamos s\u00edmbolos o caracteres en un documento para indicar su estructura l\u00f3gica o f\u00edsica \u25cf Objetivo: separar los datos de su posterior tratamiento (por ejemplo apariencia) \u25cf Si has estudiado HTML, que tambi\u00e9n es un lenguaje de marcas te ser\u00e1 familiar.","title":"Concepto de \u201cmarca\u201d"},{"location":"XML/#_1","text":"","title":""},{"location":"XML/#xml","text":"\u25cf NO es un lenguaje de programaci\u00f3n \u25cb Es un lenguaje de marcas \u25cb Es un \u201cmetalenguaje\u201d \u25cf Un metalenguaje es un lenguaje usado para describir formalmente otro lenguaje. \u25cf XML permite a los desarrolladores crear lenguajes especializados, \u25cb todos en com\u00fan: respetan la especificaci\u00f3n XML.","title":"XML"},{"location":"XML/#historia-ii-ejemplo-gml","text":":h2. Definitions: :ol. i.1. noun, a gem variety of corundum in transparent or translucent crystals of a color other than red; especially, a transparentrich blue :li.2. noun, a gem of such corundum :li.3. noun, a deep purplish blue color :li.4. adjective, made of or resembling a sapphire gem :li.5. adjective, having the color of a blue sapphire :eol. SGML: Standard Generalized Markup Language \u25cf ANSI (American National Standards Institute) a partir de GML 1980-84. \u25cb ISO(International Organization for Standardization): 1986, con ANSI \u25cf Se centra relaci\u00f3n estructura y contenido, separa \u25cb Estructura de los datos \u25cb Contenidos \u25cb Estilo \u25cf Formaliza concepto DTD: documento separado que especifica la estructura del mismo. XML \u25cf Es un lenguaje de marcas y un metalenguaje los desarrolladores crean lenguajes espec\u00edficos con sus propias etiquetas, estructuras, etc. \u25cf No limita marcas a crear, s\u00f3lo impone restricciones. \u25cf Independiente del SW y de la plataforma un mismo documento XML puede ser usado en cualquier SO con cualquier herramienta de desarrollo o publicaci\u00f3n. \u25cf Es un formato p\u00fablico, un est\u00e1ndar abierto. No depende de empresa o pa\u00eds. \u25cf F\u00e1cil de implementar: herramientas gratuitas. \u25cf El dise\u00f1ador se puede centrar en uso de etiquetas, en contenidos y su estructura. Formatear el contenido es un proceso posterior (e incluso a veces secundario) \u25cf A los ficheros xml se les comprueba la sintaxis, y se puede comprobar la estructura (validaci\u00f3n) \u25cf Pensar en XML como en una versi\u00f3n menor de SGML, no como HTLM++ XML se dise\u00f1\u00f3 pensando en la estructura y significado de los datos. HTML, en cambio, con la forma en la que se presentan los datos. \u25cf Las etiquetas XML describen datos y se usan como parte de transacciones de negocios, intercambios de informaci\u00f3n, etc. la sintaxis XML requiere precisi\u00f3n y seguir estrictamente las reglas gramaticales. Esto no ocurr\u00eda con HTML hasta hace poco.","title":"Historia (II): Ejemplo GML"}]}